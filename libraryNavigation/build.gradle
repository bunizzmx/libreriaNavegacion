plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'

}
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: "maven-publish"
apply from: rootProject.file("buildSystem/androidLibrary.gradle")
def androidBase = ext.androidBase
apply from: rootProject.file("buildSystem/java-kotlin-librarys.gradle")
def javaLibrarys = ext.javaLibrarys

android {
    namespace 'com.example.librarynavigation'
    compileSdk 33

    defaultConfig {
        minSdk 24
        targetSdk 33

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    android.sourceSets {
        main.res.srcDirs = ['src/main/res',' src/main/res2']
    }


    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    kapt {
        javacOptions {
            option("-Adagger.hilt.android.internal.disableAndroidSuperclassValidation=true")
        }
    }
    buildFeatures {
        viewBinding = true
    }
}



dependencies {
    implementation fileTree(dir: 'libs', include: '*.jar')

    //Librerias Login
    implementation  'com.mobility.ado.qa:Login-PassScreen:1.0.4'
    implementation  'com.mobility.ado.qa:Login-EmailScreen:1.0.0'
    implementation  'com.mobility.ado.qa:Login-HomeScreen:1.0.0'
    implementation  'com.mobility.ado.qa:Login-InstructionsPass:1.0.0'
    implementation  'com.mobility.ado.qa:Login-ForgotPass:1.0.0'

    //Librerias Registro
    implementation  'com.mobility.ado.qa:Register-ConfirmToken:1.0.0'
    implementation  'com.mobility.ado.qa:Register-CreatePass:1.0.0'
    implementation  'com.mobility.ado.qa:Register-Singup:1.0.0'
    implementation  'com.mobility.ado.qa:Register-WebView:1.0.0'

    implementation androidBase.androidxCore
    implementation androidBase.androidxAppCompat
    implementation materialBase.androidMaterial
    testImplementation testLibrarys.junitTest
    androidTestImplementation testLibrarys.androidTestImplementation
    androidTestImplementation testLibrarys.androidTestespresso
    testImplementation testLibrarys.mockk
    testImplementation testLibrarys.archCore
    testImplementation testLibrarys.kotlinxCoroutines

    implementation androidBase.androidxConstraintLayout
    implementation androidBase.androidxNavigation
    implementation androidOptional.androidxSwipeRefresh

    kapt kaptLibrarys.databindingKapt

    //Hilt
    implementation androidOptional.googleHilt
    kapt kaptLibrarys.hiltKapt
    implementation androidOptional.navigationHilt

    implementation 'com.squareup.okhttp3:okhttp:4.11.0'

    //Navigation
    implementation androidBase.androidxNavigationFragment
    implementation androidBase.androidxNavigationDynamic


    //Glide
    implementation androidOptional.glide
    implementation androidOptional.glideOkHttp
    kapt kaptLibrarys.databindingKapt

    implementation javaLibrarys.squeareupInterceptor

    implementation androidOptional.gsonCode
    implementation androidOptional.retrofitConverter
    implementation androidOptional.retrofitConverter

    implementation androidOptional.coroutineRetrofit

}

ext.pomfileManualGenerator = {
    def root = asNode()
    def dependenciesNode = root.appendNode('dependencies')
    configurations.implementation.allDependencies
            .findAll {
                it.name != null && it.name != 'unspecified' && it.version != 'unspecified'
            }.each {
        def dependencyNode = dependenciesNode.appendNode('dependency')
        dependencyNode.appendNode('groupId', it.group)
        dependencyNode.appendNode('artifactId', it.name)
        dependencyNode.appendNode('version', it.version)
        dependencyNode.appendNode('scope', 'compile')
        if (it.properties.excludeRules?.size() > 0) {
            def exclusionsNode = dependencyNode.appendNode('exclusions')
            it.properties.excludeRules.each { exclusion ->
                def exclusionNode = exclusionsNode.appendNode('exclusion')
                exclusion.group != null && exclusionNode.appendNode('groupId', exclusion.group)
                exclusionNode.appendNode('artifactId', exclusion.module != null ? exclusion.module : '*')
            }
        }
    }
    root.children().last()
}
project(':libraryNavigation'){
    version = "1.0.0"
    group = 'com.mobility.ado.library'
    artifactoryPublish.dependsOn('build')
    publishing{
        publications {
            gms(MavenPublication) {
                groupId = group
                artifactId = "${project.getName()}-gms"
                version = version
                artifact("$buildDir/outputs/aar/${project.getName()}-${version}-gmsRelease.aar")
                pom.withXml pomfileManualGenerator
            }
        }
    }

    artifactoryPublish {
        publications(publishing.publications.gms)
    }

}